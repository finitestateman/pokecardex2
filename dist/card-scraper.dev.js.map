{"version":3,"sources":["card-scraper.js"],"names":["cheerio","require","fs","promises","axios","extractCardData","$","basicInfoTable","basicInfo","name","find","text","stage","trim","type","hp","parseInt","weakness","retreat","length","rarity","attr","set","illustrator","moves","each","_","moveDiv","moveTable","move","energyRequired","damage","effect","push","pokedexTable","pokedexInfo","number","species","height","parseFloat","replace","weight","description","scrapeCards","allCards","errors","i","console","log","url","get","response","load","data","cardData","id","Promise","resolve","setTimeout","error","message","writeFile","JSON","stringify"],"mappings":"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","sourcesContent":["const cheerio = require('cheerio');\nconst fs = require('fs').promises;\nconst axios = require('axios');\n\nasync function extractCardData($) {\n    const basicInfoTable = $('#basic-info-table');\n    const basicInfo = {\n        name: basicInfoTable.find('tr:nth-child(1) td:nth-child(2)').text(),\n        stage: basicInfoTable\n            .find('tr:nth-child(2) td:nth-child(2)')\n            .text()\n            .trim(),\n        type: basicInfoTable\n            .find('tr:nth-child(3) td:nth-child(2)')\n            .text()\n            .trim(),\n        hp: parseInt(\n            basicInfoTable.find('tr:nth-child(4) td:nth-child(2)').text()\n        ),\n        weakness: basicInfoTable\n            .find('tr:nth-child(5) td:nth-child(2)')\n            .text()\n            .trim(),\n        retreat: basicInfoTable.find('tr:nth-child(6) td:nth-child(2) img')\n            .length,\n        rarity: basicInfoTable\n            .find('tr:nth-child(7) td:nth-child(2) img')\n            .attr('alt'),\n        set: basicInfoTable.find('tr:nth-child(8) td:nth-child(2) a').text(),\n        illustrator: basicInfoTable\n            .find('tr:nth-child(9) td:nth-child(2)')\n            .text(),\n    };\n\n    const moves = [];\n    $('.moves-div').each((_, moveDiv) => {\n        const moveTable = $(moveDiv).find('table');\n        const move = {\n            name: moveTable.find('tr:nth-child(1) td:nth-child(2)').text(),\n            energyRequired: moveTable.find(\n                'tr:nth-child(2) td:nth-child(2) img'\n            ).length,\n            damage:\n                parseInt(\n                    moveTable.find('tr:nth-child(3) td:nth-child(2)').text()\n                ) || 0,\n            effect:\n                moveTable.find('tr:nth-child(4) td:nth-child(2)').text() || '',\n        };\n        moves.push(move);\n    });\n\n    const pokedexTable = $('#pokedex-table');\n    const pokedexInfo = {\n        number: parseInt(\n            pokedexTable.find('tr:nth-child(1) td:nth-child(2)').text()\n        ),\n        species: pokedexTable.find('tr:nth-child(2) td:nth-child(2)').text(),\n        height:\n            parseFloat(\n                pokedexTable\n                    .find('tr:nth-child(3) td:nth-child(2)')\n                    .text()\n                    .replace(/[^0-9.]/g, '')\n            ) * 10,\n        weight:\n            parseFloat(\n                pokedexTable\n                    .find('tr:nth-child(4) td:nth-child(2)')\n                    .text()\n                    .replace(/[^0-9.]/g, '')\n            ) * 10,\n        description: pokedexTable\n            .find('tr:nth-child(5) td:nth-child(2)')\n            .text()\n            .trim(),\n    };\n\n    return {\n        basicInfo,\n        moves,\n        pokedexInfo,\n    };\n}\n\nasync function scrapeCards() {\n    const allCards = [];\n    const errors = [];\n\n    for (let i = 1; i <= 215; i++) {\n        try {\n            console.log(`Scraping card ${i}/215...`);\n            const url = `https://gamevlg.com/pokemon-tcg-pocket/cards/${i}`;\n            const response = await axios.get(url);\n            const $ = cheerio.load(response.data);\n            const cardData = await extractCardData($);\n            allCards.push({ id: i, ...cardData });\n\n            // 요청 간 간격 추가 (서버 부하 방지)\n            await new Promise((resolve) => setTimeout(resolve, 1000));\n        } catch (error) {\n            console.error(`Error scraping card ${i}:`, error.message);\n            errors.push({ id: i, error: error.message });\n        }\n    }\n\n    // 결과 저장\n    await fs.writeFile('cards.json', JSON.stringify(allCards, null, 2));\n    if (errors.length > 0) {\n        await fs.writeFile('errors.json', JSON.stringify(errors, null, 2));\n    }\n\n    console.log(`Scraping completed! Total cards: ${allCards.length}`);\n    if (errors.length > 0) {\n        console.log(`Errors encountered: ${errors.length}`);\n    }\n}\n\nscrapeCards().catch(console.error);\n"],"file":"card-scraper.dev.js"}