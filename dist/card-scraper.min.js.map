{"version":3,"sources":["card-scraper.js"],"names":["cheerio","require","fs","promises","axios","extractCardData","$","basicInfoTable","basicInfo","moves","pokedexTable","pokedexInfo","regeneratorRuntime","async","_context","prev","next","name","find","text","trim","hp","parseInt","weakness","stage","type","retreat","rarity","set","illustrator","moveTable","each","_","moveDiv","energyRequired","damage","effect","species","height","parseFloat","description","replace","weight","allCards","errors","abrupt","stop","scrapeCards","i","url","response","cardData","_context2","load","console","log","concat","awrap","get","sent","data","id","Promise","resolve","setTimeout","t0","message","push","error","writeFile","JSON","stringify","length"],"mappings":"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","file":"card-scraper.min.js","sourcesContent":["const cheerio = require('cheerio');\nconst fs = require('fs').promises;\nconst axios = require('axios');\n\nasync function extractCardData($) {\n    const basicInfoTable = $('#basic-info-table');\n    const basicInfo = {\n        name: basicInfoTable.find('tr:nth-child(1) td:nth-child(2)').text(),\n        stage: basicInfoTable\n            .find('tr:nth-child(2) td:nth-child(2)')\n            .text()\n            .trim(),\n        type: basicInfoTable\n            .find('tr:nth-child(3) td:nth-child(2)')\n            .text()\n            .trim(),\n        hp: parseInt(\n            basicInfoTable.find('tr:nth-child(4) td:nth-child(2)').text()\n        ),\n        weakness: basicInfoTable\n            .find('tr:nth-child(5) td:nth-child(2)')\n            .text()\n            .trim(),\n        retreat: basicInfoTable.find('tr:nth-child(6) td:nth-child(2) img')\n            .length,\n        rarity: basicInfoTable\n            .find('tr:nth-child(7) td:nth-child(2) img')\n            .attr('alt'),\n        set: basicInfoTable.find('tr:nth-child(8) td:nth-child(2) a').text(),\n        illustrator: basicInfoTable\n            .find('tr:nth-child(9) td:nth-child(2)')\n            .text(),\n    };\n\n    const moves = [];\n    $('.moves-div').each((_, moveDiv) => {\n        const moveTable = $(moveDiv).find('table');\n        const move = {\n            name: moveTable.find('tr:nth-child(1) td:nth-child(2)').text(),\n            energyRequired: moveTable.find(\n                'tr:nth-child(2) td:nth-child(2) img'\n            ).length,\n            damage:\n                parseInt(\n                    moveTable.find('tr:nth-child(3) td:nth-child(2)').text()\n                ) || 0,\n            effect:\n                moveTable.find('tr:nth-child(4) td:nth-child(2)').text() || '',\n        };\n        moves.push(move);\n    });\n\n    const pokedexTable = $('#pokedex-table');\n    const pokedexInfo = {\n        number: parseInt(\n            pokedexTable.find('tr:nth-child(1) td:nth-child(2)').text()\n        ),\n        species: pokedexTable.find('tr:nth-child(2) td:nth-child(2)').text(),\n        height:\n            parseFloat(\n                pokedexTable\n                    .find('tr:nth-child(3) td:nth-child(2)')\n                    .text()\n                    .replace(/[^0-9.]/g, '')\n            ) * 10,\n        weight:\n            parseFloat(\n                pokedexTable\n                    .find('tr:nth-child(4) td:nth-child(2)')\n                    .text()\n                    .replace(/[^0-9.]/g, '')\n            ) * 10,\n        description: pokedexTable\n            .find('tr:nth-child(5) td:nth-child(2)')\n            .text()\n            .trim(),\n    };\n\n    return {\n        basicInfo,\n        moves,\n        pokedexInfo,\n    };\n}\n\nasync function scrapeCards() {\n    const allCards = [];\n    const errors = [];\n\n    for (let i = 1; i <= 215; i++) {\n        try {\n            console.log(`Scraping card ${i}/215...`);\n            const url = `https://gamevlg.com/pokemon-tcg-pocket/cards/${i}`;\n            const response = await axios.get(url);\n            const $ = cheerio.load(response.data);\n            const cardData = await extractCardData($);\n            allCards.push({ id: i, ...cardData });\n\n            // 요청 간 간격 추가 (서버 부하 방지)\n            await new Promise((resolve) => setTimeout(resolve, 1000));\n        } catch (error) {\n            console.error(`Error scraping card ${i}:`, error.message);\n            errors.push({ id: i, error: error.message });\n        }\n    }\n\n    // 결과 저장\n    await fs.writeFile('cards.json', JSON.stringify(allCards, null, 2));\n    if (errors.length > 0) {\n        await fs.writeFile('errors.json', JSON.stringify(errors, null, 2));\n    }\n\n    console.log(`Scraping completed! Total cards: ${allCards.length}`);\n    if (errors.length > 0) {\n        console.log(`Errors encountered: ${errors.length}`);\n    }\n}\n\nscrapeCards().catch(console.error);\n"]}